package ohno;

import java.io.*;
import java.util.*;
import java.util.stream.Collectors;
public class Main {
    Vector<Integer> input;
    public static void main(String[] args) {
         long startTime = System.nanoTime();
        Main main = new Main();
        //System.out.println(main.good_triangles(input,circumference));
        main.input = new Vector<Integer>();
        try {
            FileReader file = new FileReader("/Users/bf000037/IdeaProjects/ccc/src/main/resources/s4.1-06.in");
            BufferedReader reader = new BufferedReader(file);
            String specs = reader.readLine().split(" ")[1].strip();
            String inputs = reader.readLine();
            String[] array = inputs.split(" ");
            List<String> distinct = Arrays.stream(array).distinct().collect(Collectors.toList()); // <- for use in ccc
            Vector distinct_V = new Vector<String>();
            distinct_V.addAll(distinct);
            int whyisthiscursed = Integer.parseInt(specs);
            for (Object item : distinct_V){
                main.input.add(Integer.parseInt((String) item));
            }
            Collections.sort(main.input);
            System.out.println(main.input);
            int things = main.good_triangles(distinct_V, whyisthiscursed);
            System.out.println(things);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        long endTime   = System.nanoTime();
        long totalTime = endTime - startTime;
        System.out.println(totalTime);
    }
    public int good_triangles(Vector<Integer> input, int Circumference) {
        int counter = 0;
        final int circumference_half = Circumference >> 1;
        ListIterator iterator = input.listIterator();
        int cur;
        do {
            int cur_index = iterator.nextIndex();
            cur = Integer.parseInt((String) iterator.next());
            ListIterator secondaryIterator = input.listIterator(cur_index);
            int cur_second;
            do {
                cur_second = Integer.parseInt((String) secondaryIterator.next());
                int lowest_index = find_limit(cur + circumference_half,false,0,circumference_half-1);
                int highest_index = find_limit(Circumference- cur_second,true,0,Circumference-1);
                if (lowest_index == highest_index || lowest_index == -1 || highest_index == -1){
                    continue;
                }
                counter += highest_index - lowest_index;
                // find 3rds
            } while (cur_second <= circumference_half + cur && secondaryIterator.hasNext());

        } while (cur <= circumference_half);
        return 1;
    }
    public int find_limit(int limit, boolean greater, int low, int high) {
        int midpoint = low + ((high - low) >> 1);
        int mid_element = input.get(midpoint);
        if (midpoint >= high || (high - low) >> 1 == 0 || midpoint >= input.size() - 1){
            if (greater ? input.get(midpoint) < limit : input.get(midpoint) > limit){
                return midpoint - 1;
            } else return -1;
        }
        if (mid_element == limit){
            return midpoint;
        } else if (mid_element < limit){
            if (input.get(midpoint+1) > limit){
                if (greater){
                    return midpoint;
                } else {
                    return midpoint+1;
                }
            } else {
                return find_limit(limit,greater,midpoint,high);// aaaaaaaaaaa stack overflow error
            }
        } else if (mid_element > limit) {
            if ((input.get(midpoint-1))<limit){
                if (greater){
                    return midpoint-1;
                } else {
                    return midpoint;
                }
            }else {
                return find_limit(limit,greater,low,midpoint);
            }
        }
        return -1;
    }
}
class point{
    int c;
    int r;
    public point(int c,int r){
        // constructors
        this.c = c;
        this.r = r;
    }
    public point(String c, String r){
        this.c = Integer.parseInt(c);
        this.r = Integer.parseInt(r);
    }
    private point copy(point p){
        this.c = p.c;
        this.r = p.r;
        return this;
    }
}
class Pair{
    Object a;
    Object b;
    public Pair(Object a, Object b){
        this.a = a;
        this.b = b;
    }
    public Pair copy(Pair from){
        this.a = from.a;
        this.b = from.b;
        return this;
    }
}
//    public static point nearest_edge(int c, int r, int size){
//        // check diagonal
//        if (c == r || size + 1 == r + c) {
//            // if diagonal
//            int chalf = Math.abs(c - size);
//            int rhalf = Math.abs(r - size);
//            int dir=0;
//            boolean left;
//            boolean low;
//            if (chalf >= c) {chalf = c; left = true;} else {left = false;}
//            if (rhalf >= r) {rhalf = r; low = false;} else {low = true;}
//            return new point(chalf,0);
//        }
//        return new point(23,0);
//
//    }
//    public int intabs(int i){
//        return i ^ (1 >> 1);
//    }